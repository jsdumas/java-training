package io.jsd.training.binary;

public enum MiniDamBase implements FieldParams {
	
	/*
	 * BLOC 0 : byte 0 à 7
	 */
	CODE_MESSAGE_BLOC_0(0, 1, 0, 2),
	CODE_MISSION_BLOC_0(0, 2, 2, 10),
	SENS_CIRCULATION_BLOC_0(1, 1, 4, 2),
	NOMBRE_FU_CONDUITE_BLOC_0(1, 2, 6, 3),
	NOMBRE_FU_VARIANT_INVALIDE_BLOC_0(2, 1, 1, 3),
	INDICATION_VARIANT_INVALIDE_SECTEUR_BLOC_0(2, 2, 4, 12),
	LOCALISATION_CORRECTE_SECTEUR_BLOC_0(4, 2, 0, 12),
	ACTIVATION_CORRECTE_SECTEUR_BLOC_0(5, 2, 4, 12),
	NOMBRE_DEFAUT_BALISE_BLOC_0(7, 1, 0, 2),
	NOMBRE_DEFAUT_INVARIANT_BLOC_0(7, 1, 2, 2),
	NOMBRE_DEFAUT_VARIANT_BLOC_0(7, 1, 4, 2),
	NOMBRE_BALISE_RATEE_BLOC_0(7, 1, 6, 2),
	/*
	 * BLOC 1 : byte 8 à 15
	 */
	CODE_MESSAGE_BLOC_1(8, 1, 0, 2),
	CODE_MISSION_BLOC_1(8, 2, 2, 10),
	SENS_CIRCULATION_BLOC_1(9, 1, 4, 2),
	ETAT_CONTROLE_VITESSE_BLOC_1(9, 1, 7, 1),
	ETAT_CAB_SIGNAL_BLOC_1(10, 1, 0, 1),
	DEFAUT_ETALONNAGE_BLOC_1(10, 1, 1, 1),
	NOMBRE_DEFAUT_ROUE_PHONIQUE_INTERNE_BLOC_1(10, 1, 2, 2),
	NOMBRE_DEFAUT_ROUE_PHONIQUE_ENRAYAGE_BLOC_1(10, 1, 4, 2),
	NOMBRE_DEFAUT_ROUE_PHONIQUE_QVA_BLOC_1(10, 1, 6, 2),
	NUMERO_VERSION_LOGICIEL_BORD_BLOC_1(11, 1, 0, 8),
	INDICATION_NON_ANNULATION_SECTEUR_BLOC_1(12, 2, 0, 12),
	NOMBRE_SIGNAUX_FRANCHIS_NON_ANNULES_BLOC_1(13, 1, 4, 4),
	NUMERO_BRANCHE_PREMIERE_BALISE_RATEE_BLOC_1(14, 2, 0, 16),
	/*
	 * BLOC 2 : byte 16 à 23
	 */
	CODE_MESSAGE_BLOC_2(16, 1, 0, 2),
	CODE_MISSION_BLOC_2(16, 2, 2, 10),
	SENS_CIRCULATION_BLOC_2(17, 1, 4, 2),
	NUMERO_TRAIN_BLOC_2(17, 2, 6, 10),
	NOMBRE_FU_CADRE_VERT_7_BLOC_2(19, 1, 0, 2),
	NOMBRE_FU_CADRE_VERT_2_BLOC_2(19, 1, 2, 2),
	NOMBRE_FU_AVEC_CADRE_JAUNE_7_BLOC_2(19, 1, 4, 2),
	NOMBRE_FU_AVEC_CADRE_JAUNE_2_BLOC_2(19, 1, 6, 2),
	BRANCHE_DERNIER_FU_CADRE_VERT_BLOC_2(20, 2, 0, 16),
	BRANCHE_DERNIER_FU_CADRE_JAUNE_BLOC_2(22, 2, 0, 16),
	/*
	 * BLOC 3 : byte 24 à 31
	 */
	CODE_MESSAGE_BLOC_3(24, 1, 0, 2),
	CODE_MISSION_BLOC_3(24, 2, 2, 10),
	SENS_CIRCULATION_BLOC_3(25, 1, 4, 2),
	TYPE_TRAIN(25, 1, 6, 2),
	SECTEUR_DERNIERE_SORTIE_RECONFIGURATION(26, 1, 1, 5),
	NOMBRE_FU_DEPASSEMENT_VITESSE_AUTORISEE_6(26, 1, 6, 2),
	NOMBRE_FU_DECELERATION_VOYANT_JAUNE_7(27, 1, 0, 2),
	NOMBRE_FU_VITESSE_SUPERIEURE_30KMH_VOYANT_JAUNE_7(27, 1, 2, 2),
	NOMBRE_FU_VOYANT_JAUNE_2(27, 1, 4, 2),
	NOMBRE_FU_VOYANT_ROUGE(27, 1, 6, 2),
	BRANCHE_DERNIER_FU_VOYANT_JAUNE(28, 2, 0, 16),
	BRANCHE_DERNIER_FU_VOYANT_ROUGE(30, 2, 0, 16),
	/*
	 * BLOC 4 : byte 32 à 39
	 */
	CODE_MESSAGE_BLOC_4(32, 1, 0, 2),
	CODE_MISSION_BLOC_4(32, 2, 2, 10),
	SENS_CIRCULATION_BLOC_4(33, 1, 4, 2),
	ETAT_DEFAUT_FU(33, 1, 6, 1),
	REINITIALISATION_CAB_SIGNAL(33, 1, 7, 1),
	NOMBRE_SIGNAUX_NON_ANNULES_PAR_TEMPORISATION_SOL(34, 1, 0, 3),
	NOMBRE_SORTIE_SACEM_RECONFIGURATION(34, 1, 3, 2),
	K_CO_VT_HS(34, 1, 5, 1),
	NOMBRE_TRANSITIONS_DE_EN_A_HS_DU_K_CO_VT(34, 1, 6, 2),
	NOMBRE_FU_COMMUTATION_DE_CM_A_PA_3(35, 1, 0, 2),
	NOMBRE_FU_DEPART_EN_PA_INVALIDE_4(35, 1, 2, 2),
	NOMBRE_FU_VOYANT_ROUGE_CLIGNOTANT(35, 1, 4, 2),
	NOMBRE_FU_VARIANTS_INVALIDES_2(35, 1, 6, 2),
	BRANCHE_DERNIER_FU__VOYANT_CMP(36, 2, 0, 16),
	BRANCHE_DERNIER_FU_2_VARIANTS_INVALIDES(38, 2, 0, 16),
	/*
	 * BLOC 5 : byte 40 à 47
	 */
	CODE_MESSAGE_BLOC_5(40, 1, 0, 2),
	CODE_MISSION_BLOC_5(40, 2, 2, 10),
	SENS_CIRCULATION_BLOC_5(41, 1, 4, 2),
	LONGUEUR_TRAIN_LGT2(41, 1, 6, 1),
	LONGUEUR_TRAIN_LGT1(41, 1, 7, 1),
	NOMBRE_CHANGEMENTS_LONGUEUR_TRAIN(42, 1, 0, 2),
	NOMBRE_ENTREES_CMP(42, 1, 2, 2),
	NOMBRE_FU_VARIANT_VALIET_REDUCTION_POINT_BUT(42, 1, 4, 2),
	NOMBRE_DEFAUTS_LOCALISATION_BALISE_9(42, 1, 6, 2),
	NOMBRE_DEFAUTS_LOCALISATION_BALISE_10(43, 1, 0, 2),
	NOMBRE_DEFAUTS_LOCALISATION_BALISE_11(43, 1, 2, 2),
	NOMBRE_DEFAUTS_LOCALISATION_BALISE_15(43, 1, 4, 2),
	NOMBRE_DEFAUTS_LOCALISATION_BALISE_17(43, 1, 6, 2),
	BRANCHE_DERNIER_FU_VARIANTE_VALIET_REDUCTION_POINT_BUT(44, 2, 0, 16),
	BRANCHE_DERNIER_DEFAUT_LOCALISATION_BALISE(46, 2, 0, 16),

	/*
	 * BLOC 6 : byte 48 à 55
	 */
	CODE_MESSAGE_BLOC_6(48, 1, 0, 2),
	CODE_MISSION_BLOC_6(48, 2, 2, 10),
	SENS_CIRCULATION_BLOC_6(49, 1, 4, 2),
	NOMBRE_DEFAUTS_LOCALISATION_PERTE_ARRET_1(49, 1, 6, 2),
	NOMBRE_DEFAUTS_LOCALISATION_PERTE_CABINE_2(50, 1, 0, 2),
	NOMBRE_DEFAUTS_LOCALISATION_INVARIANTS_4(50, 1, 2, 2),
	NOMBRE_DEFAUTS_LOCALISATION_INVARIANTS_5(50, 1, 4, 2),
	NOMBRE_DEFAUTS_LOCALISATION_INVARIANTS_6(50, 1, 6, 2),
	NOMBRE_DEFAUTS_LOCALISATION_INVARIANTS_7(51, 1, 0, 2),
	NOMBRE_DEFAUTS_LOCALISATION_INVARIANTS_8(51, 1, 2, 2),
	NOMBRE_DEFAUTS_LOCALISATION_VARIANTS_13(51, 1, 4, 2),
	NOMBRE_DEFAUTS_LOCALISATION_VARIANTS_14(51, 1, 6, 2),
	BRANCHE_DU_DERNIER_DEFAUT_LOCALISATION_INVARIANTS_OU_VARIANTS(52, 2, 0, 16),
	BRANCHE_DU_DERNIER_DEFAUT_LOCALISATION_PERTE_CABINE_OU_ARRET(54, 2, 0, 16),
	/*
	 * BLOC 7 : byte 56 à 63
	 */
	CODE_MESSAGE_BLOC_7(56, 1, 0, 2),
	CODE_MISSION_BLOC_7(56, 2, 2, 10),
	SENS_CIRCULATION_BLOC_7(57, 1, 4, 2),
	NOMBRE_DEFAUTS_ROUE_1_NON_INITIALISEE(57, 1, 6, 2),
	NOMBRE_DEFAUTS_ROUE_2_TESTS_CAPTEUR_DEFECTUEUX(58, 1, 0, 2),
	NOMBRE_DEFAUTS_ROUE_3_DISCORDANCE_CAPTEUR(58, 1, 2, 2),
	NOMBRE_DEFAUTS_ROUE_4_DEFAUT_RECURENT_ETALONNAGE(58, 1, 4, 2),
	NOMBRE_DEFAUTS_ROUE_5_ETALONNAGE_HORS_LIMITE(58, 1, 6, 2),
	NOMBRE_DEFAUTS_ROUE_6_ETALONNAGE_NON_SECUTAIRE(59, 1, 0, 2),
	NOMBRE_DEFAUTS_ROUE_7_ENRAYAGE_EN_VITESSE(59, 1, 2, 2),
	NOMBRE_DEFAUTS_ROUE_8_BLOCAGE_ESSIEU(59, 1, 4, 2),
	NOMBRE_DEFAUTS_ROUE_9_DEFAUT_QVA(59, 1, 6, 2),
	SECTEUR_OU_BRANCHE_DERNIER_FU_5(60, 2, 0, 16),
	INDICATEUR_MESSAGE_AMOS_1_SACEM_0_KCVB(62, 1, 0, 1),
	STATUS_DEFAUT_24V_ENREGISTREUR(62, 1, 1, 1),
	NOMBRE_FU_5_RECUL(62, 1, 6, 2),
	NOMBRE_DEFAUTS_LOCALISATION(63, 1, 0, 2),
	NOMBRE_DEFAUTS_ROUE_RECUL_SUP_10M(63, 1, 2, 2),
	NOMBRE_DEFAUTS_ROUE_RECUP_ERREURS(63, 1, 4, 4);
	
	
	private final int bytePosition;
	private final int byteNumber;
	private final int bitPosition;
	private final int bitNumber;
	
	private MiniDamBase(int bytePosition, int byteNumber, int bitPosition, int bitNumber) {
		this.bytePosition=bytePosition;
		this.byteNumber=byteNumber;
		this.bitPosition=bitPosition;
		this.bitNumber=bitNumber;
	}

	@Override
	public int getBytePosition() {
		return this.bytePosition;
	}
	
	@Override
	public int getByteNumber() {
		return this.byteNumber;
	}
	
	@Override
	public int getBitPosition() {
		return this.bitPosition;
	}
	
	@Override
	public int getBitNumber() {
		return this.bitNumber;
	}

}
